name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all

jobs:
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: "20.x"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install --force
        working-directory: src/SceneSplit.Frontend

      - name: Run unit tests with coverage
        run: npm run test:ci -- --code-coverage
        working-directory: src/SceneSplit.Frontend

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: src/SceneSplit.Frontend/coverage

      - name: Build Angular project
        run: npm run build -- --configuration production
        working-directory: src/SceneSplit.Frontend

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: src/SceneSplit.Frontend/dist

  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    env:
      DOTNET_VERSION: "8.0.x"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build backend solution
        run: dotnet build src/SceneSplit.Backend/SceneSplit.Backend.sln --configuration Release

      - name: Run unit tests with coverage
        run: |
          dotnet test tests/*/*.UnitTests.csproj \
            --configuration Release \
            --logger "junit;LogFilePath=./TestResults/unit-tests.xml" \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults

      - name: Run integration tests
        run: |
          projects=$(ls tests/*/*.IntegrationTests.csproj 2>/dev/null || true)
          if [ -z "$projects" ]; then
            echo " No integration test projects found. Skipping..."
          else
            for proj in $projects; do
              echo "â–¶Running integration tests for $proj"
              dotnet test "$proj" \
                --configuration Release \
                --logger "junit;LogFilePath=./TestResults/$(basename $proj)-results.xml" \
                --results-directory ./TestResults
            done
          fi

      - name: Publish backend
        run: dotnet publish src/SceneSplit.Backend/SceneSplit.Backend.sln -c Release -o ./publish

      - name: Upload test results xml
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: ./TestResults

      - name: Code Coverage Summary Report
        id: coverage
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: TestResults/**/coverage.cobertura.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: "60 80"

      - name: Add Coverage Comment to PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "## Backend Code Coverage"
          message: ${{ steps.coverage.outputs.markdown }}

      - name: Upload backend publish build
        uses: actions/upload-artifact@v4
        with:
          name: backend-publish
          path: ./publish

  deploy:
    name: Deploy (CDK)
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Placeholder for CDK deployment
      - name: Deploy infrastructure with CDK
        run: echo "ðŸš€ CDK deploy would happen here"
